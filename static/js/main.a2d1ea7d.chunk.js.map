{"version":3,"sources":["components/employeelist/index.js","components/wrapper/index.js","components/search/index.js","components/heading/index.js","App.js","serviceWorker.js","index.js"],"names":["EmployeeList","props","employee","employees","Table","striped","bordered","hover","Button","type","onClick","handleSortSelect","data-tag","id","map","item","key","alt","name","src","image","occupation","location","Wrapper","className","children","Search","placeholder","onChange","handleInputChange","value","onKeyPress","e","preventDefault","handleFormSubmit","Heading","Jumbotron","fluid","Container","App","state","search","sortName","searchName","query","employeeArray","filter","res","toLowerCase","includes","console","log","setState","length","alert","sort","a","b","nameA","nameB","reverse","event","target","getAttribute","this","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a2d1ea7d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\nimport { Button, Table } from 'react-bootstrap';\r\n\r\nfunction EmployeeList(props) {\r\n\r\n  const employee = props.employees\r\n\r\n  return (\r\n    <Table striped bordered hover >\r\n      <thead>\r\n        <tr>\r\n          <th>Profile Pic</th>\r\n          <th>\r\n            Employee Name\r\n          <Button\r\n              type=\"button\"\r\n              onClick={props.handleSortSelect}\r\n              data-tag=\"Name\"\r\n              id=\"Btn\"\r\n            >\r\n              Sort\r\n          </Button>\r\n          </th>\r\n          <th>Occupation </th>\r\n          <th>Location </th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {employee.map(item => (\r\n          <tr key={item.id}>\r\n            <td><img alt={item.name} src={item.image} /></td>\r\n            <td>{item.name}</td>\r\n            <td>{item.occupation}</td>\r\n            <td>{item.location}</td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </Table>\r\n\r\n  );\r\n}\r\n\r\nexport default EmployeeList;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <main className=\"wrapper\">{props.children}</main>;\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./style.css\";\r\nimport { Button } from 'react-bootstrap';\r\n\r\nfunction Search(props) {\r\n  return (\r\n    <form className=\"form\">\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Employee Name\"\r\n        className=\"mr-sm-2\"\r\n        onChange={props.handleInputChange}\r\n        value={props.value}\r\n        name=\"search\"\r\n        onKeyPress={(e) => { e.key === 'Enter' && e.preventDefault(); }}\r\n      />\r\n      <Button onClick={props.handleFormSubmit}>Search</Button>\r\n    </form>\r\n\r\n  );\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\nimport \"./style.css\";\r\nimport { Jumbotron, Container } from 'react-bootstrap';\r\n\r\nfunction Heading(props) {\r\n\r\nreturn (\r\n\r\n<Jumbotron fluid>\r\n  <Container>\r\n    <h1>Employee Directory</h1>\r\n  </Container>\r\n</Jumbotron>\r\n)\r\n}\r\n\r\nexport default Heading;","import React, { Component } from \"react\";\nimport EmployeeList from './components/employeelist';\nimport Wrapper from './components/wrapper';\nimport Search from './components/search';\nimport Heading from './components/heading';\nimport employees from './utils/employees.json'\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    employees: employees,\n    search: '',\n    sortName: true\n  }\n\n  searchName = query => {\n    let employeeArray = this.state.employees;\n    employeeArray = employeeArray.filter(res => res.name.toLowerCase().includes(query.toLowerCase()));\n    if (query === \"\") {\n      console.log(\"No Search\")\n      this.setState({ employees: employees });\n      this.setState({ search: \"\" })\n      return;\n    } else if (employeeArray.length < 1) {\n      this.setState({ search: \"\" })\n      this.setState({ employees: employees });\n      console.log(employees)\n      console.log(\"No search\")\n      alert(\"No Employee Match\");\n      return;\n    } else {\n      this.setState({ employees: employeeArray });\n    }\n  };\n\n  sort = query => {\n    let employeeArray = this.state.employees;\n    if (query === \"Name\") {\n      employeeArray = employeeArray.sort(function (a, b) {\n        let nameA = a.name.toLowerCase(), nameB = b.name.toLowerCase()\n        if (nameA < nameB)\n          return -1\n        if (nameA > nameB)\n          return 1\n        return 0\n      })\n      if (this.state.sortName === true) {\n        this.setState({ sortName: false })\n        this.setState({ employees: employeeArray });\n\n        return;\n      }\n      if (this.state.sortName === false) {\n        employeeArray = employeeArray.reverse();\n        this.setState({ sortName: true })\n        this.setState({ employees: employeeArray });\n\n        return;\n      }\n\n    }\n  }\n\n  handleSortSelect = event => {\n    event.preventDefault();\n    console.log(\"Clicked\")\n\n    const value = event.target.getAttribute('data-tag');\n    console.log(value)\n    this.sort(value);\n  };\n\n  handleInputChange = event => {\n    const value = event.target.value;\n    const name = event.target.name;\n    this.setState({\n      [name]: value\n    });\n  };\n\n  handleFormSubmit = event => {\n    event.preventDefault();\n    this.searchName(this.state.search);\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Heading />\n        <Search\n          value={this.state.search}\n          handleInputChange={this.handleInputChange}\n          handleFormSubmit={this.handleFormSubmit}\n        />\n        <EmployeeList\n          employees={this.state.employees}\n          handleSortSelect={this.handleSortSelect}\n        />\n      </Wrapper>)\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}